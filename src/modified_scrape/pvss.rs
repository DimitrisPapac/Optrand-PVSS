use crate::{ComGroup, EncGroup, modified_scrape::errors::PVSSError, Scalar};

use ark_ec::PairingEngine;
use ark_ff::Zero;
use ark_serialize::{CanonicalDeserialize, CanonicalSerialize, Read, SerializationError, Write};


/* Struct PVSSShare models the "core" of a PVSS sharing generated by the a participant when acting as dealer */

#[derive(CanonicalSerialize, CanonicalDeserialize, Clone, Debug, PartialEq)]
pub struct PVSSCore<E>
where
    E: PairingEngine,
{
    pub encs:  Vec<EncGroup<E>>,   // vector of encryptions c
    pub comms: Vec<ComGroup<E>>,   // vector of commitments v
}

impl<E> PVSSCore<E>
where
    E: PairingEngine,
{
    // Create a new "empty" PVSS core, where all fields are set to "zero" values.
    pub fn empty(num_participants: usize) -> Self {
        PVSSCore {
	        encs:  vec![EncGroup::<E>::zero(); num_participants],
	        comms: vec![ComGroup::<E>::zero(); num_participants],
        }
    }

    // Aggregation of two PVSSCore instances.
    pub fn aggregate(&self, other: &Self) -> Result<Self, PVSSError<E>> {
        // Perform some basic checks:

        // Commitment vector must be non-empty
        if self.comms.is_empty() {
            return Err(PVSSError::EmptyEncryptionsVectorError);
        }

        // Commitment vector lengths must match
        if self.comms.len() != other.comms.len() {
            return Err(PVSSError::MismatchedCommitmentsError(self.comms.len(), other.comms.len()));
        }

        // Encryption vector lengths must match
        if self.encs.len() != other.encs.len() {
            return Err(PVSSError::MismatchedEncryptionsError(self.encs.len(), other.encs.len()));
        }

        // Commitment and encryption vector lengths must match
        if self.comms.len() != self.encs.len() {
            return Err(PVSSError::MismatchedCommitmentsEncryptionsError(self.comms.len(), other.encs.len()));
        }

        // At this point, the following also hold:
        // self.encs.len() != 0
        // other.comms.len() == other.encs.len()
        // other.comms.len(), other.encs.len() != 0

        // Aggregate PVSS cores
        let result = Self {
                encs: self
                    .encs
                    .iter()
                    .zip(other.encs.iter())
                    .map(|(e1, e2)| *e1 + *e2)
                    .collect::<Vec<_>>(),
                comms: self
                    .comms
                    .iter()
                    .zip(other.comms.iter())
                    .map(|(c1, c2)| *c1 + *c2)
                    .collect::<Vec<_>>(),
        };

        Ok(result)
    }

}


// PVSSShareSecrets models the secret parts underlying each share.
pub struct PVSSShareSecrets<E: PairingEngine> {
    pub p_0: Scalar<E>,           // secret polynomial's free term s s.t.: p_i(0) = s
    pub my_secret: EncGroup<E>,   // partial secret
}


/* Unit tests: */

#[cfg(test)]
mod test {

    use super::PVSSCore;
    use crate::{
        ComGroup,
        ComGroupP,
        EncGroup,
        EncGroupP,
        signature::utils::tests::check_serialization,
    };

    use ark_bls12_381::Bls12_381 as E;   // type Bls12_381 = Bls12<Parameters> (Bls12 implements PairingEngine)
    use ark_ec::ProjectiveCurve;
    use ark_ff::Zero;
    use ark_std::UniformRand;

    use rand::thread_rng;
    use std::ops::Neg;

    #[test]
    fn test_empty() {
        let size: usize = 10;

        let core = PVSSCore::<E>::empty(size);

        assert!(core.encs.iter().all(|&x| x == EncGroup::<E>::zero()));
        assert!(core.comms.iter().all(|&x| x == ComGroup::<E>::zero()));
    }

    #[test]
    fn test_eq() {
        let size: usize = 10;

        let core1 = PVSSCore::<E>::empty(size);
        let core2 = PVSSCore::<E>::empty(size);

        assert!(core1 == core2)
    }

    #[test]
    fn test_neq() {
        let size: usize = 10;
        let rng = &mut thread_rng();

        let encs1 = vec![EncGroupP::<E>::rand(rng).into_affine(); size];
        let encs2 = vec![EncGroupP::<E>::rand(rng).into_affine(); size];

        let comms1 = vec![ComGroupP::<E>::rand(rng).into_affine(); size];
        let comms2 = vec![ComGroupP::<E>::rand(rng).into_affine(); size];

        let core1 = PVSSCore::<E> {encs: encs1, comms: comms1};
        let core2 = PVSSCore::<E> {encs: encs2, comms: comms2};

        assert!(core1 != core2)
    }

    #[test]
    fn test_eq_different_lengths() {
        let size: usize = 10;

        let core1 = PVSSCore::<E>::empty(size);
        let core2 = PVSSCore::<E>::empty(size + 1);

        assert!(core1 != core2)
    }

    #[test]
    fn test_core_aggregation() {
        let rng = &mut thread_rng();
        let size: usize = 10;

        let encs = vec![EncGroupP::<E>::rand(rng).into_affine(); size];
        let comms = vec![ComGroupP::<E>::rand(rng).into_affine(); size];

	let core1 = PVSSCore::<E> {
            encs:  encs.clone(),
            comms: comms.clone(),
        };

        let core2 = PVSSCore::<E> {
            encs:  encs.iter().map(|&x| x.neg()).collect(),
            comms: comms.iter().map(|&x| x.neg()).collect(),
        };

        let result = core1.aggregate(&core2).unwrap();

        assert!(result.encs.iter().all(|&x| x == EncGroup::<E>::zero()));
        assert!(result.comms.iter().all(|&x| x == ComGroup::<E>::zero()));
    }

    #[test]
    #[should_panic]
    fn test_aggregate_empty_encs() {
        let size = 10;

        let core1 = PVSSCore::<E> {
	        encs:  vec![],
	        comms: vec![ComGroup::<E>::zero(); size],
        };

        let core2 = PVSSCore::<E> {
	        encs:  vec![EncGroup::<E>::zero(); size],
	        comms: vec![ComGroup::<E>::zero(); size],
        };

        core1.aggregate(&core2).unwrap();
    }

    #[test]
    #[should_panic]
    fn test_aggregate_empty_comms() {
        let size = 10;

        let core1 = PVSSCore::<E> {
	        encs:  vec![EncGroup::<E>::zero(); size],
	        comms: vec![],
        };

        let core2 = PVSSCore::<E> {
	        encs:  vec![EncGroup::<E>::zero(); size],
	        comms: vec![ComGroup::<E>::zero(); size],
        };

        core1.aggregate(&core2).unwrap();
    }

    #[test]
    #[should_panic]
    fn test_aggregate_mismatching_encs_lengths() {
        let size1 = 10;
        let size2 = 20;

        let core1 = PVSSCore::<E> {
	        encs:  vec![EncGroup::<E>::zero(); size1],
	        comms: vec![ComGroup::<E>::zero(); size1],
        };

        let core2 = PVSSCore::<E> {
	        encs:  vec![EncGroup::<E>::zero(); size2],
	        comms: vec![ComGroup::<E>::zero(); size2],
        };

        core1.aggregate(&core2).unwrap();
    }

    #[test]
    #[should_panic]
    fn test_aggregate_mismatching_encs_comms_lengths() {
        let size = 10;

        let core1 = PVSSCore::<E> {
	        encs:  vec![EncGroup::<E>::zero(); size],
	        comms: vec![ComGroup::<E>::zero(); size+1],   // mismatch with enc's length
        };

        let core2 = PVSSCore::<E> {
	        encs:  vec![EncGroup::<E>::zero(); size],
	        comms: vec![ComGroup::<E>::zero(); size],
        };

        core1.aggregate(&core2).unwrap();
    }

    #[test]
    fn test_serialization() {
        let rng = &mut thread_rng();
        let size = 10;

	    let core = PVSSCore::<E> {
            encs:  vec![EncGroupP::<E>::rand(rng).into_affine(); size],
            comms: vec![ComGroupP::<E>::rand(rng).into_affine(); size],
        };

        check_serialization(core.clone());
    }

}
